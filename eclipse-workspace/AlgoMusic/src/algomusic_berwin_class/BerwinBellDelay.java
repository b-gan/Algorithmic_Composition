package algomusic_berwin_class;

/**************
** WARNING - this code automatically generated by Syntona.
** The real source is probably a Syntona patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Syntona.
**
** Syntona is available from: http://www.softsynth.com/syntona/
*/

import com.jsyn.ports.UnitOutputPort;
import com.jsyn.unitgen.UnitVoice;
import com.jsyn.unitgen.VariableRateMonoReader;
import com.jsyn.ports.UnitInputPort;
import com.jsyn.unitgen.Multiply;
import com.jsyn.unitgen.SineOscillator;
import com.jsyn.unitgen.InterpolatingDelay;
import com.softsynth.shared.time.TimeStamp;
import com.jsyn.unitgen.PassThrough;
import com.jsyn.data.SegmentedEnvelope;
import com.jsyn.unitgen.Circuit;

public class BerwinBellDelay extends Circuit implements UnitVoice {
    // Declare units and ports.
    SineOscillator mSineOsc;
    SineOscillator mSineOsc2;
    SineOscillator mSineOsc3;
    SineOscillator mSineOsc4;
    PassThrough mFrequencyPassThrough;
    public UnitInputPort frequency;
    PassThrough mAmplitudePassThrough;
    public UnitInputPort amplitude;
    PassThrough mOutputPassThrough;
    public UnitOutputPort output;
    SegmentedEnvelope mSegEnv;
    VariableRateMonoReader mMonoRdr;
    Multiply mAtimes;
    Multiply mAtimes2;
    Multiply mAtimes3;
    PassThrough mRatio1PassThrough;
    public UnitInputPort ratio1;
    PassThrough mRatio2PassThrough;
    public UnitInputPort ratio2;
    PassThrough mRatio3PassThrough;
    public UnitInputPort ratio3;
    Multiply mAtimes4;
    InterpolatingDelay mDelay1;
    PassThrough mDelay1timePassThrough;
    public UnitInputPort delay1time;
    PassThrough mDelay2timePassThrough;
    public UnitInputPort delay2time;
    PassThrough mDelay3timePassThrough;
    public UnitInputPort delay3time;
    InterpolatingDelay mDelay12;

    // Declare inner classes for any child circuits.

    public BerwinBellDelay() {
        // Create unit generators.
        add(mSineOsc = new SineOscillator());
        add(mSineOsc2 = new SineOscillator());
        add(mSineOsc3 = new SineOscillator());
        add(mSineOsc4 = new SineOscillator());
        add(mFrequencyPassThrough = new PassThrough());
        addPort(frequency = mFrequencyPassThrough.input, "frequency");
        add(mAmplitudePassThrough = new PassThrough());
        addPort(amplitude = mAmplitudePassThrough.input, "amplitude");
        add(mOutputPassThrough = new PassThrough());
        addPort( output = mOutputPassThrough.output, "output");
        double[] mSegEnvData = {
            0.23551848989272076, 1.0,
            0.1407677996470042, 0.5482456140350878,
            0.044212281141248255, 0.39473684210526316,
            0.5, 0.0,
        };
        mSegEnv = new SegmentedEnvelope( mSegEnvData );
        mSegEnv.setSustainBegin( 1 );
        mSegEnv.setSustainEnd( 3 );
        add(mMonoRdr = new VariableRateMonoReader());
        add(mAtimes = new Multiply());
        add(mAtimes2 = new Multiply());
        add(mAtimes3 = new Multiply());
        add(mRatio1PassThrough = new PassThrough());
        addPort(ratio1 = mRatio1PassThrough.input, "ratio1");
        add(mRatio2PassThrough = new PassThrough());
        addPort(ratio2 = mRatio2PassThrough.input, "ratio2");
        add(mRatio3PassThrough = new PassThrough());
        addPort(ratio3 = mRatio3PassThrough.input, "ratio3");
        add(mAtimes4 = new Multiply());
        add(mDelay1 = new InterpolatingDelay());
        add(mDelay1timePassThrough = new PassThrough());
        addPort(delay1time = mDelay1timePassThrough.input, "delay1time");
        add(mDelay2timePassThrough = new PassThrough());
        addPort(delay2time = mDelay2timePassThrough.input, "delay2time");
        add(mDelay3timePassThrough = new PassThrough());
        addPort(delay3time = mDelay3timePassThrough.input, "delay3time");
        add(mDelay12 = new InterpolatingDelay());
        // Connect units and ports.
        mSineOsc.output.connect(mOutputPassThrough.input);
        mSineOsc2.output.connect(mDelay1.input);
        mSineOsc3.output.connect(mDelay12.input);
        mSineOsc4.output.connect(mOutputPassThrough.input);
        mFrequencyPassThrough.output.connect(mAtimes.inputA);
        mFrequencyPassThrough.output.connect(mAtimes2.inputA);
        mFrequencyPassThrough.output.connect(mAtimes3.inputA);
        mFrequencyPassThrough.output.connect(mSineOsc.frequency);
        mAmplitudePassThrough.output.connect(mAtimes4.inputA);
        mMonoRdr.output.connect(mSineOsc.amplitude);
        mMonoRdr.output.connect(mSineOsc2.amplitude);
        mMonoRdr.output.connect(mSineOsc3.amplitude);
        mMonoRdr.output.connect(mSineOsc4.amplitude);
        mAtimes.output.connect(mSineOsc2.frequency);
        mAtimes2.output.connect(mSineOsc3.frequency);
        mAtimes3.output.connect(mSineOsc4.frequency);
        mRatio1PassThrough.output.connect(mAtimes.inputB);
        mRatio2PassThrough.output.connect(mAtimes2.inputB);
        mRatio3PassThrough.output.connect(mAtimes3.inputB);
        mAtimes4.output.connect(mMonoRdr.amplitude);
        mDelay1.output.connect(mOutputPassThrough.input);
        mDelay1timePassThrough.output.connect(mDelay1.delay);
        mDelay2timePassThrough.output.connect(mDelay12.delay);
        mDelay12.output.connect(mOutputPassThrough.input);
        // Setup
        frequency.setup(0.0, 493.8833012561241, 987.7666025122483);
        amplitude.setup(0.0, 0.5, 1.0);
        mMonoRdr.rate.set(1.0);
        ratio1.setup(0.01, 1.5, 10.0);
        ratio2.setup(0.01, 1.2, 10.0);
        ratio3.setup(0.01, 1.8, 10.0);
        mAtimes4.inputB.set(0.5178583658509391);
        mDelay1.allocate(44100);
        delay1time.setup(0.01, 0.2333263149643039, 0.5);
        delay2time.setup(0.0, 0.8642829577012612, 1.0);
        delay3time.setup(0.01, 0.418296469445677, 0.5);
        mDelay12.allocate(44100);
    }

    public void noteOn(double frequency, double amplitude, TimeStamp timeStamp) {
        this.frequency.set(frequency, timeStamp);
        this.amplitude.set(amplitude, timeStamp);
        mMonoRdr.dataQueue.queueOn( mSegEnv, timeStamp);
    }

    public void noteOff(TimeStamp timeStamp) {
        mMonoRdr.dataQueue.queueOff( mSegEnv, false, timeStamp);
    }
    
    public UnitOutputPort getOutput() {
        return output;
    }
}
