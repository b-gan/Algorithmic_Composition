package algomusic_berwin_class;

/**************
** WARNING - this code automatically generated by Syntona.
** The real source is probably a Syntona patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Syntona.
**
** Syntona is available from: http://www.softsynth.com/syntona/
*/

import com.jsyn.ports.UnitOutputPort;
import com.jsyn.unitgen.UnitVoice;
import com.jsyn.unitgen.VariableRateMonoReader;
import com.jsyn.ports.UnitInputPort;
import com.softsynth.shared.time.TimeStamp;
import com.jsyn.unitgen.PassThrough;
import com.jsyn.data.SegmentedEnvelope;
import com.jsyn.unitgen.FilterBandPass;
import com.jsyn.unitgen.WhiteNoise;
import com.jsyn.unitgen.Circuit;

public class SeaOne extends Circuit implements UnitVoice {
    // Declare units and ports.
    PassThrough mFrequencyPassThrough;
    public UnitInputPort frequency;
    PassThrough mAmplitudePassThrough;
    public UnitInputPort amplitude;
    PassThrough mOutputPassThrough;
    public UnitOutputPort output;
    SegmentedEnvelope mSegEnv;
    FilterBandPass mBandPass;
    WhiteNoise mWhiteNoise;
    VariableRateMonoReader mMonoRdr;

    // Declare inner classes for any child circuits.

    public SeaOne() {
        // Create unit generators.
        add(mFrequencyPassThrough = new PassThrough());
        addPort(frequency = mFrequencyPassThrough.input, "frequency");
        add(mAmplitudePassThrough = new PassThrough());
        addPort(amplitude = mAmplitudePassThrough.input, "amplitude");
        add(mOutputPassThrough = new PassThrough());
        addPort( output = mOutputPassThrough.output, "output");
        double[] mSegEnvData = {
            0.5, 1.0,
            0.3413485413443622, 0.4780701754385965,
            0.1857978028802132, 0.07017543859649122,
            0.5, 0.0,
        }; //might try other types of envelopes
        
        mSegEnv = new SegmentedEnvelope( mSegEnvData );
        add(mBandPass = new FilterBandPass());
        add(mWhiteNoise = new WhiteNoise());
        add(mMonoRdr = new VariableRateMonoReader());
        
        // Connect units and ports.
        mAmplitudePassThrough.output.connect(mMonoRdr.amplitude);
        mBandPass.output.connect(mOutputPassThrough.input);
        mWhiteNoise.output.connect(mBandPass.input);
        mMonoRdr.output.connect(mWhiteNoise.amplitude);
        // Setup
        
        frequency.setup(0.0, 1.0, 1.0);
        amplitude.setup(0.0, 1.0, 1.0);
        mBandPass.frequency.set(3500.0);
        mBandPass.amplitude.set(1.0);
        mBandPass.Q.set(4.0);
        mMonoRdr.rate.set(1.0);
    }

    public void noteOn(double frequency, double amplitude, TimeStamp timeStamp) {
        this.frequency.set(frequency, timeStamp);
        this.amplitude.set(amplitude, timeStamp);
        mMonoRdr.dataQueue.queueOn( mSegEnv, timeStamp);
    }

    public void noteOff(TimeStamp timeStamp) {
        mMonoRdr.dataQueue.queueOff( mSegEnv, false, timeStamp);
    }
    
    public UnitOutputPort getOutput() {
        return output;
    }
}
