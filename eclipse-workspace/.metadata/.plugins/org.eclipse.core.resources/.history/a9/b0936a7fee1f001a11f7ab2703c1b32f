package finalproject;

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.FlowLayout;
import java.awt.Panel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.concurrent.ThreadLocalRandom;

import javax.swing.JFrame;

import com.softsynth.jmsl.Composable;
import com.softsynth.jmsl.EventScheduler;
import com.softsynth.jmsl.JMSL;
import com.softsynth.jmsl.JMSLMixerContainer;
import com.softsynth.jmsl.JMSLRandom;
import com.softsynth.jmsl.MusicShape;
import com.softsynth.jmsl.ParallelCollection;
import com.softsynth.jmsl.Playable;
import com.softsynth.jmsl.jsyn2.JSynMusicDevice;
import com.softsynth.jmsl.jsyn2.JSynUnitVoiceInstrument;
import com.softsynth.jmsl.jsyn2.unitvoices.FilteredSawtoothBL;
import com.softsynth.jmsl.util.MIDIFileToMusicShape;
import com.softsynth.jmsl.view.MusicShapeEditor;




public class GeneticMIDI extends JFrame implements ActionListener {

  
        MusicShape myMusicShape;
     
        JMSLMixerContainer mixer;
        MusicShapeEditor musicShapeEditor;
        Button startButton;
        Button stopButton;
        // a polyphonic JMSL instrument that allocates and plays JSyn voices.
        JSynUnitVoiceInstrument ins;
       

        public void build() {
                JMSLRandom.randomize();
                initJMSL();
                initMusicDevices();
                initMixer();
                initInstrument();
                initMusicShape();
                buildGUI();
                buildMusicShape();
                addWindowListener(new WindowAdapter() {
                   
                    public void windowClosing(WindowEvent e) {
                        cleanup();
                        System.exit(0);
                    }
                    
                });
        }

        public void cleanup() {
                removeAll();
                myMusicShape.finishAll();
                try {
                    myMusicShape.waitForDone();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                JMSL.scheduler.stop();
                mixer.stop();
                JMSL.closeMusicDevices();
            
        }

        private void initJMSL() {
            JMSL.scheduler = new EventScheduler();
            JMSL.scheduler.start();
            JMSL.clock.setAdvance(0.2);
        }

        void initMusicDevices() {
            JSynMusicDevice dev = JSynMusicDevice.instance();
            dev.open();
        }

        void initMixer() {
            mixer = new JMSLMixerContainer();
            mixer.start();
        }

        void initInstrument() {
            // SUBSTITUTE YOUR UnitVoice Class name HERE!!!
            ins = new JSynUnitVoiceInstrument(8, FilteredSawtoothBL.class.getName());

            mixer.addInstrument(ins);

        }

        void initMusicShape() {
        
        	
            myMusicShape = new MusicShape(ins.getDimensionNameSpace());
            myMusicShape.setInstrument(ins);
            myMusicShape.setRepeats(1000);
            myMusicShape.prefab();
        }

        private void buildGUI() {
            setLayout(new BorderLayout());

            musicShapeEditor = new MusicShapeEditor();
            musicShapeEditor.addMusicShape(myMusicShape);
            add(BorderLayout.NORTH, musicShapeEditor.getComponent());

            add(BorderLayout.CENTER, mixer.getPanAmpControlPanel());

            Panel buttonPanel = new Panel();
            buttonPanel.setLayout(new FlowLayout());
            buttonPanel.add(startButton = new Button("Click to start"));
            buttonPanel.add(stopButton = new Button("Click to stop"));
            add(BorderLayout.SOUTH, buttonPanel);

            startButton.addActionListener(this);
            stopButton.addActionListener(this);
            stopButton.setEnabled(false);
 
        }

        /**
         * call prefab() on MusicShape to create a number of elements with random values in each
         * dimension. Plays every dimension of the JSyn UnitVoice polyphonically
         *
         */
        void buildMusicShape() throws IOException{
            //myMusicShape.prefab();
        	
        	MIDIFileToMusicShape fileToMusicShape = new MIDIFileToMusicShape();
    		fileToMusicShape.convertMIDIFile("/Users/nick/Desktop/happy_birthday.mid");
    		ParallelCollection par = fileToMusicShape.getParallelCollection();
    		System.out.println("Par col has " + par.size() + " children");
    		for (int i = 0; i < par.size(); i++) {
    			MusicShape s = (MusicShape) par.get(i);
    			double totalDur = s.get(s.size() - 1, 0);
    			s.differentiate(totalDur, 0);
    			s.scale(1.0 / 127.0, 0, s.size() - 1, 2);
    			s.print();
    			if (i == 1) {
    				myMusicShape = s;}
    		}
     	
            myMusicShape.print();
            musicShapeEditor.refresh();
            

            // add a Playable that scrambles some data every time this MusicShape
            // repeats
            
            myMusicShape.addRepeatPlayable(new MusicShapeScrambler(musicShapeEditor));
        }

        public void actionPerformed(ActionEvent e) {
            Object source = e.getSource();
            if (source == startButton) {
                try {
					buildMusicShape();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
                myMusicShape.launch(JMSL.now());
            
                startButton.setEnabled(false);
                stopButton.setEnabled(true);
            }
            if (source == stopButton) {
                myMusicShape.finishAll();
                startButton.setEnabled(true);
                stopButton.setEnabled(false);
            }
        }
        
        public static void main(String[] args) {
            GeneticMIDI algorithmicMelody = new GeneticMIDI();
            algorithmicMelody.build();
            algorithmicMelody.pack();
            algorithmicMelody.setVisible(true);           
        }

    }

    /**
     * This class implements Playable and can be added to a MusicShape's RepeatPlayables. It scrambles a
     * randomly chosen subset of data every time the MusicShape repeats
     *
     * @author Nick Didkovsky, email: nick@didkovsky.com  
     *
     */
class MusicShapeScrambler implements Playable {

        MusicShapeEditor editor;

        /**
         * Pass in the MusicShapeEditor just so we can call refresh() on it after scarmalbing. Pass in
         * null if you don't care
         */

        MusicShapeScrambler(MusicShapeEditor editor) {
            this.editor = editor;
        }
        double durationC = 0.25;
        double ratioOne = 1.25;
        double ratioTwo = 1.5;
        double ratioThird = 1.8;
        double amp = 0.5;
        int rep = 0;
        public double play(double playTime, Composable parent) {
            MusicShape s = (MusicShape) parent;
            //int randomIndex1 = JMSLRandom.choose(s.size());
            //int randomIndex2 = JMSLRandom.choose(s.size());
            //the idea is that the root of the melody remains the same but after a while the ratios of the chords
            //become ever so slightly off
            //if you disconnect the modulator, it sounds straight out of a horror movie
            //it actually does not sound as nice when conneced to the modulator 
            double min = -0.1;
            double max = 0.2;
            double min1 = 0.1;
            double max1 = 0.2;
            double min2 = 0.00001;
            double max2 = 0.00004;
            double min3 = -0.2;
            double max3 = 0.0001;
            
            for(int i=0;i<s.size();i++) {
                double random1 = ThreadLocalRandom.current().nextDouble(min,max);
            	s.set(durationC+random1, i,0);
            	double random2 = ThreadLocalRandom.current().nextDouble(min1,max1);
            	s.set(ratioOne+random2, i,4);
            	double random3  = ThreadLocalRandom.current().nextDouble(min2,max2);
            	s.set(ratioTwo+random3, i,5);
            	double random4 = ThreadLocalRandom.current().nextDouble(min3,max3);
            	s.set(ratioThird+random4,i,6);
            	s.set(amp+0.01,i,2);
            	if(rep==5) {
            		rep = 0;
            		durationC=durationC*0.15;
            	}
            }
            ratioTwo+=ThreadLocalRandom.current().nextDouble(min2,max2);
            ratioThird+=ThreadLocalRandom.current().nextDouble(min3,max3);
            ratioOne+=ThreadLocalRandom.current().nextDouble(min1,max1);
            durationC+=ThreadLocalRandom.current().nextDouble(min,max); //time change
            amp+= 0.03;
            rep+=1;
            
            if (editor != null) {
                editor.refresh();
            }
            return playTime;
        }
    }
